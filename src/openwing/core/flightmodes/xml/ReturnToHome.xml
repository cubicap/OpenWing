<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2019 Petr Kubica

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<flightmode name="%in_fm_rth_name" id="returntohome" version="1" schemaversion="1">
    <description>
%in_fm_rth_desc     
    </description>
    <requirements>
        <component>gyro</component>
        <component>gps</component>
        <component>baro</component>              
    </requirements>
    <parameters>
        <parameter name="rth_pressure_offset" defaultvalue="120" type="integer" units="Pa">
            <options>
                <range minvalue="0" maxvalue="1000" />
            </options>
            <description>
%in_fm_rth_offset_desc
            </description>    
        </parameter>
        <parameter name="rth_roll_sensitivity" defaultvalue="0.15" type="decimal" units="">
            <options>
                <range minvalue="0.05" maxvalue="0.25" />
            </options>
            <description>
%in_fm_rth_sensitivity_desc
            </description>
        </parameter>
    </parameters>
    <regulator>
        <pid name="rthpitch" pval="0.4" ival="0.15" dval="0" minoutput="-1000" maxoutput="1000" period="0.05">%in_fm_rth_reg_pitch</pid>
        <pid name="rthroll" pval="0.25" ival="0.05" dval="0" minoutput="-1000" maxoutput="1000" period="0.05">%in_fm_rth_reg_roll</pid>
        <pid name="rthpressure" pval="0.25" ival="0.05" dval="0" minoutput="-1000" maxoutput="1000" period="0.05">%in_fm_rth_reg_altitude</pid>
    </regulator>
    <code>
        <part name="init">
baro_getPressure();
int32_t pressureTarget;
if (pressure &gt; pressureStart + rth_pressure_offset){
    pressureTarget = pressure;
}
else {
    pressureTarget = pressureStart + rth_pressure_offset;
}
        </part>
        
        <part name="loop">
gyro_update();
baro_update();
gyro_getRPY();
baro_getPressure();
rx_update();

gps_getLongitude()
gps_getLatitude();

int16_t course = angles[2];

int16_t azimuthToTarget = TinyGPSPlus::courseTo(latitude, longitude, latitudeStart, longitudeStart) * 100;
int16_t azimuthCorrection = azimuthToTarget - course;
if (azimuthCorrection &gt; 180) {
    azimuthCorrection -= 360;
}
else if (azimuthCorrection &lt; -180) {
    azimuthCorrection += 360;
}

int16_t rollAngleTarget = azimuthToTarget * 6;
int16_t rollAngleInput = angles[0];
int16_t pitchAngleInput = angles[1];

int16_t pitchAngleTarget = -rthpressure.calculate(pressure, pressureTarget);

int16_t rollOutput = rthroll.calculate(rollAngleInput, rollAngleTarget);
int16_t pitchOutput = rthpitch.calculate(pitchAngleInput, pitchAngleTarget);


servos_setAxis(rollOutput, pitchOutput);
motor_setPower(rx_channels[rx_channel_throttle]);
        </part>
    </code>
</flightmode>


